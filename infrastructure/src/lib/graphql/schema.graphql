schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

############## ENUMS #####################

enum ThreadStatus {
  NEW
  PENDING
  PROCESSING
  COMPLETE
}

############## INPUTS #####################

input GetPersonaInput {
  personaId: ID!
}

input GetThreadInput {
  threadId: ID!
}

input DeleteThreadInput {
  threadId: ID!
}

input AddThreadInput {
  personaId: ID!
}

input MessageInput {
  sender: String!
  message: String!
}

input AddMessageInput {
  threadId: ID!
  prompt: ID!
}

input SystemSendMessageChunkInput {
  userId: ID!
  threadId: ID!
  status: ThreadStatus!
  chunk: String!
}

input SystemAddMessageInput {
  userId: ID!
  threadId: ID!
  status: ThreadStatus!
  message: MessageInput!
}

input AddVoiceInput {
  personaId: ID!
  message: String!
}

input RecieveMessageChunkAsyncInput {
  threadId: ID!
}

############## TYPES #####################

type Persona @aws_cognito_user_pools @aws_iam {
  personaId: ID!

  name: String! # The name of the persona
  avatar: String! # The URL of the persona's avatar image
  prompt: String # The system prompt that the persona uses.
  subtitle: String # A subtitle for the persona, displayed in the UI
  description: String # A description of the persona
  color: String # The color of the persona's background and related UI elements
  model: String # The name of the model that the persona uses
  knowledgeBaseId: String # The ID of the knowledge base that the persona can use
}

type MessageChunk @aws_cognito_user_pools @aws_iam {
  userId: ID!
  threadId: ID!
  chunk: String!
  status: ThreadStatus!
}

type Message @aws_cognito_user_pools @aws_iam {
  sender: String!
  message: String!
  createdAt: String!
}

type Thread @aws_cognito_user_pools @aws_iam {
  threadId: ID!
  userId: ID!
  persona: Persona!
  messages: [Message!]
  status: ThreadStatus!
  createdAt: String!
}

############## PAYLOADS #####################

type AddThreadPayload @aws_cognito_user_pools @aws_iam {
  thread: Thread
}

type AddMessagePayload @aws_cognito_user_pools @aws_iam {
  message: Message
}

type AddVoicePayload @aws_cognito_user_pools @aws_iam {
  message: Message
}

type DeleteThreadPayload @aws_cognito_user_pools @aws_iam {
  thread: Thread
}

type SystemSendMessageChunkPayload @aws_cognito_user_pools @aws_iam {
  userId: ID!
  threadId: ID!
  status: ThreadStatus!
  chunk: String!
}

type SystemAddMessagePayload @aws_cognito_user_pools @aws_iam {
  message: Message
}

############## QUERIES #####################

type Query @aws_cognito_user_pools @aws_iam {
  getPersona(input: GetPersonaInput!): Persona
  getAllPersonas: [Persona!]

  getThread(input: GetThreadInput!): Thread
  getAllThreads: [Thread!]
}

############## MUTATIONS #####################

type Mutation {
  # Creation
  addThread(input: AddThreadInput!): AddThreadPayload @aws_cognito_user_pools @aws_iam
  addMessageAsync(input: AddMessageInput!): AddMessagePayload @aws_cognito_user_pools
  addVoice(input: AddVoiceInput!): AddVoicePayload @aws_cognito_user_pools @aws_iam

  # Deletion
  deleteThread(input: DeleteThreadInput!): DeleteThreadPayload @aws_cognito_user_pools @aws_iam

  # System
  systemSendMessageChunk(input: SystemSendMessageChunkInput!): SystemSendMessageChunkPayload @aws_iam
  systemAddMessage(input: SystemAddMessageInput!): SystemAddMessagePayload @aws_iam
}

############## SUBSCRIPTIONS #####################

type Subscription {
  recieveMessageChunkAsync(input: RecieveMessageChunkAsyncInput!): SystemSendMessageChunkPayload
    @aws_subscribe(mutations: ["systemSendMessageChunk"])
    @aws_cognito_user_pools
}
